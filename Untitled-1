import { 
    Component, 
    ViewChild, 
    ElementRef, 
    Input, 
    Output,
    EventEmitter, 
    OnInit
} from '@angular/core';
import { NavController } from 'ionic-angular';
import { GoogleMap, GoogleMapsEvent, GoogleMapsLatLng, GoogleMapsMarkerOptions } from 'ionic-native';
import { Observable } from 'rxjs';

import { IPos, IMarker } from './../../store';

@Component({
    selector: 'dsl-map',
    templateUrl: 'map.html'
})
export class Map extends OnInit {
    
    @Input() headline: string;
    @Input() zoom: Observable<number>;
    @Input() center: Observable<IPos>;
    @Input() markers: Observable<Array<IMarker>>;
    @Output() centerChanged: EventEmitter<IPos> = new EventEmitter<IPos>();
    @Output() zoomChanged: EventEmitter<number> = new EventEmitter<number>();

    @ViewChild('googlemap') mapElement: HTMLElement;
    googlemap: any;
    private lastEmittedPos: IPos;
    private currentMarkers: Array<any> = [];

    constructor(public navCtrl: NavController) {
        super();    
    }

    ngOnInit() {
        this.loadMap();

        this.zoom.subscribe((z) => this.googlemap.setZoom(z));
        this.center.subscribe((c) => this.googlemap.setCenter(new GoogleMapsLatLng(c.lat, c.lng)));
        this.markers.subscribe((markers) => {
            this.currentMarkers.map((m) => m.setMap(null));
            this.currentMarkers = [];
            markers.map((m) => this.addMarker(m))
        }); 
    }

    private loadMap() {

        const latLng = new GoogleMapsLatLng(0,0);
        const mapOptions = {
            center: latLng,
            zoom: 15
        }

        const map : GoogleMap = new GoogleMap(this.mapElement, mapOptions); 
        map.one(GoogleMapsEvent.MAP_READY).then(() => console.log('Map is ready!'));

        let lastZoom : number = 15;
        map.on('zoom_changed').subscribe(()=>{
            map.getCameraPosition().then((cameraPosition)=> {
                const zoom = cameraPosition.zoom;
                if (lastZoom !== zoom){
                    lastZoom = zoom;
                    this.zoomChanged.emit(zoom);
                }
            })
        });

        let lastPos : IPos;
        map.getCameraPosition().then((cameraPosition)=>{
             lastPos = cameraPosition.target as GoogleMapsLatLng;
        });
        map.on('center_changed').subscribe(()=>{
            map.getCameraPosition().then((cameraPosition)=> {
                this.emitCenterChanged(cameraPosition.target as GoogleMapsLatLng);
            });
        });
        
        this.googlemap = map;
    }

    private emitCenterChanged(pos: IPos): void {
        if (this.isSamePos(this.lastEmittedPos, pos))
            return;

        this.lastEmittedPos = pos;
        this.centerChanged.emit(pos);
    }

    private isSamePos(pos1: IPos, pos2: IPos): boolean {
        return pos1 && pos2 && (pos1.lat === pos2.lat && pos1.lng === pos1.lng)
    }

    private addMarker(m : IMarker) {

        const markerOptions : GoogleMapsMarkerOptions = {
            position: new GoogleMapsLatLng(m.pos.lat, m.pos.lng),
            icon: m.icon,
            snippet: m.content
        };

        this.googlemap.addMarker(markerOptions);
        //this.addInfoWindow(marker, m.content);

        //this.currentMarkers.push(marker);
    }

    private addInfoWindow(marker, content) {
        /*const infoWindow = new google.maps.InfoWindow({
            content: content
        });

        google.maps.event.addListener(marker, 'click', () => {
            infoWindow.open(this.googlemap, marker);
        });*/
    }
}